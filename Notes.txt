rotation issue:

the rotation box raycast check, checks the position for where the cast was hit on the child out of bounds compared to the parent transform position, however, because the checks are on if statements, the "if out of bounds child is to the right/left" is before the "bottom/above" check, therefore if an S, Z, L or J block rotates while close to the bottom bounds, and the child that triggers the out of bounds cast is still to the right or left of the center, then it will treat it as if it needs to move to the right or left because those checks are first. this will not correct the position and will end up moving the block until it is no longer touching the bottom bounds, i.e the play area (this is the reason why it looks like it teleports out of the play area bc if hanging piece is checked first, then move right/left is called until it is no longer touching the bounds).

theoretical fix: (didn't work)
rotation method in block movement script needs a refactor

If you move for a child block in order to get it in bounds, and after the movement, that child block is still out of bounds, move the block back and check other directions compared to block's position to see if another directional move is possible, if so, move that direction instead (and if not, its probably an I block, just continue with another move in the same direction), if that child block is STILL out of bounds, then this probably means the rotation isnt possible. you can try checking if doing the first move as well will put the block into bounds, but this is highly unlikely, as a double move in two different directions means the child is sitting out of bounds in a corner, which would require a double move (up and left or up and right) because it is at the bottom right or bottom left corner out of bounds which theoretically should be impossible due to block origin points. probably after the move back, second direction move check, if block is still out of bounds then just stop there, and continue to alt rotation or undo rotation.


PSUEDOCODE: (for theoretical fix)
move child to get it out of bounds

check if that child is still out of bounds

if yes
  check if the child needs to move in another direction compared to the parent
    if yes
      move back to pre move position (before moved for this child) and move in the other direction
        if child is STILL out of bounds move original direction as well
          if STILL out of bounds, this rotation was likely impossible, try rotate alternate
    if not
      it is probably an I, continue as normal because it needs to move again to get child in bounds
      

if not
  DONE

true fix:
It seems as though trying to rotate the block in every direction before giving up on the rotation was wrong. apparently you either rotate the direction you want, or the opposite way, or else no rotation, but I was trying to rotate the block a third time (180 degrees from original position before first rotation) and that wasn't supposed to be a feature. Also moving the block down to fix a rotation isn't good, so that was removed. Streamlined and refactored rotation code no to have 3 nested while-loops which was also causing issues.